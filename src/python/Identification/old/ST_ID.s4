<task "solid_table_identification">
    ~identify tables made up of exclusively solid blocks, with one data block and up to four label blocks which fit at least one dimmension~
    -input:
        <json "blocks_output">
            -assembly:
                <sheet>
                    -properties:
                        <int "sheet_number">
                        <blocks>
                            -assembly:
                                <block_group>
                                    -assembly:
                                        <data_block>
                                            -properties:
                                                <int "start_row">
                                                <int "end_row">
                                                <char "start_column">
                                                <char "end_column">
                                                <cells>
                                                    -assembly:
                                                        <cell>
                                    -subtypes: 
                                        <LABEL>
                                        <DATA>
    -output:
        <json "solid_tables_output">
            -assembly:
                <sheet>
                    -properties:
                        <int "sheet_number">
                        <free_blocks>
                            -assembly:
                                <block_group>
                                    -assembly:
                                        <data_block>
                                            -properties:
                                                <int "start_row">
                                                <int "end_row">
                                                <char "start_column">
                                                <char "end_column">
                                                <cells>
                                                    -assembly:
                                                        <cell>
                                    -subtypes: 
                                        <LABEL>
                                        <DATA>
                        <solid_tables>
                            -assembly:
                                <solid_table>
                                    -properties:
                                        <data_block "data_component">
                                        <label_components>
                                            -properties:
                                                <data_block "top_label_component">
                                                <data_block "left_label_component">
                                                <data_block "right_label_component">
                                                <data_block "bottom_label_component">
    -subtasks:
        <read_in_json>
            ~read in json and parse into dictionaries~
        <convert_coords>
            ~convert columns from string to int~
            <measure_dsbs_and_lsbs>
                ~record size of all data and label solid blocks and add to SBs dict~
            <organize_sbs_by_size>
                ~reorganize data SBs by size to start with the smallest~
        <check_labels>
            ~check label block connections by data block~
            -subtasks:
                <check_x_coordinates_of_available_labels>
                    ~check coords of label SBs to find potential options~
                    -subtasks:
                        <generate_available_places>
                            ~generate coords of available starting and ending positions~
                        <check_potentials_against_options>
                            ~check all potentials against options given, add right matches to right potential dict for block, add left matches to table pass 1 dict and remove from right potential~
                        <fill_right_potentials>
                            ~add all nonremoved right_potentials STs~
                        <fill_free_blocks>
                            ~add all non-removed free blocks to the free blocks~
                <check_y_coordinates_of_available_labels>
                    ~check coords of label SBs to find potential options~
                        <generate_available_places>
                            ~generate coords of available starting and ending positions~
                        <check_potentials_against_options>
                            ~check all potentials against options given, add bottom matches to bottom potential dict for block, add top matches to table pass 1 dict and remove from top potential~
                        <fill_bottom_potentials>
                            ~add all nonremoved bottom potential STs~
                        <fill_free_blocks>
                            ~add all non-removed free blocks to the free blocks~
        <print_output>
            ~go through ST annotated sheet dicts and print for validation~
            -subtasks:
                <print_data_coords>
                    ~print the rows and columns of the data SB~
                <print_spots_occupied> 
                    ~print coords of label SBs within label_components~
        <write_json>
            ~write st_annotated_sheets dict to json~
