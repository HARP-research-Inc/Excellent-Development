<task_definition>
    <Task "Excellent">
        ~turns spreadsheets into s4 and Python using ML~
        -input:
            <csv "input_file_set">
                ~a set of one or more input spreadsheets~
            <int "chunk_size">
                ~the size of the cunks passed to the AI~
            <bool "full">
                ~on option to analyze the full spreadsheet~
        -output:
            <s4 "Spreadsheet_Object_Definition">
            <s4 "Spreadsheet_Object_Instance">
            <py "python_class">
            <py "python_class_instance">

<subtask_definition>
    <Task "Excellent">
        ~turns single page spreadsheets into s4 and Python using ML~
        -input:
            <csv "input_file_set">
            ~a set of one or more input spreadsheets~
        -output:
            <s4 "Spreadsheet_Object_Definition">
            <s4 "Spreadsheet_Object_Instance">
            <py "python_class">
            <py "python_class_instance">
        -subtasks:
            <import_sheet>
                ~import sheet/sheets~
            <chunk_sheet>
                ~break down spreadsheets into smaller pieces~
            <formula_tagging>
                ~tag formulas within a chunk~
            <label_tagging>
                ~tag labels within a chunk~
            <Subchunks>
                ~Break each chunk into largest rectangles of same basic type~
            <tabling>
                ~combine subchunks across chunks to build tables~
            <sub_tabling> 
                ~copmare position and size of tables to create a tree heirerarchy of tables~
            <formula_conversion>
                ~use libraries to turn excel formulas into python~
            <usage_definining>
                ~use AI to predict usage of a spreadsheet to create a description~
            <s4_compilation>
                ~produce and save an s4 file with said structure~
            <s4_instance_compilation>
                ~produce data instances for all the excel files put in~
            <python_compilation>
                ~produce and save a python class file with said structure~
            <python_instance_compilation>
                ~produce and save python files for every instance of the data~

<tasks_with_i-o>
    <Task "Excellent">
        ~turns single page spreadsheets into s4 and Python using ML~
        -input:
            <csv "input_file_set">
            ~a set of one or more input spreadsheets~
        -output:
            <s4 "Spreadsheet_Object_Definition">
            <s4 "Spreadsheet_Object_Instance">
            <py "python_class">
            <py "python_class_instance">
        -subtasks:
            <import_sheet>
                ~import sheet/sheets~
                -input:
                    <csv "input_file_set">
                -output:
                    <internal "imported_sheets">
            <chunk_sheet>
                ~break down spreadsheets into smaller pieces~
                -input:
                    <internal "imported_sheets">
                -output:
                    <internal "chunked_sheets">
            <formula_tagging>
                ~tag formulas within a chunk~
                -input:
                    <internal "chunked_sheets">
                -output:
                    <internal "tagged_formulas">
            <label_tagging>
                ~tag labels within a chunk~
                -input:
                    <internal "chunked_sheets">
                -output:
                    <internal "tagged_labels">
            <Subchunks>
                ~Break each chunk into largest rectangles of same basic type~
                -input:
                    <internal "chunked_sheets">
                    <internal "tagged_labels">
                    <internal "tagged_formulas">
                -output:
                    <internal "subchunks">
            <tabling>
                ~combine subchunks across chunks to build tables~
                -input:
                    <internal "subchunks">
                -output:
                    <internal "tables">
            <sub_tabling> 
                ~compare position and size of tables to create a tree hierarchy of tables~
                -input:
                    <internal "tables">
                -output:
                    <internal "sub_tables">
            <formula_conversion>
                ~use libraries to turn excel formulas into python~
                -input:
                    <internal "tables">
                    <internal "tagged_formulas">
                -output:
                    <internal "python_formulas">
            <usage_definining>
                ~use AI to predict usage of a spreadsheet to create a description~
                -input:
                    <internal "python_formulas">
                -output:
                    <internal "usage_description">
            <s4_compilation>
                ~produce and save an s4 file with said structure~
                -input:
                    <internal "usage_description">
                -output:
                    <s4 "Spreadsheet_Object_Definition">
            <s4_instance_compilation>
                ~produce data instances for all the excel files put in~
                -input:
                    <s4 "Spreadsheet_Object_Definition">
                -output:
                    <s4 "Spreadsheet_Object_Instance">
            <python_compilation>
                ~produce and save a python class file with said structure~
                -input:
                    <s4 "Spreadsheet_Object_Definition">
                -output:
                    <py "python_class">
            <python_instance_compilation>
                ~produce and save python files for every instance of the data~
                -input:
                    <py "python_class">
                -output:
                    <py "python_class_instance">

Can you provide definitions of the input and output objects in Simplified Semantic System Synthesis Framework?

<csv "input_file_set">
    ~Set of one or more input spreadsheets~
    -properties:
        <sheets>
            ~The sheets in the file set~

<sheet>
    ~Individual sheet in the file set~
    -properties:
        <name>
            ~Name of the sheet~
        <sheet_data>
            ~Data contained in the sheet~
            -assembly:
                <cell_row>
                    ~Rows in the table~
                    <cell>
                        ~cells in the row~
                        -properties:
                            <cell_value>
                                ~value in cell~
                            <cell_tag>
                                ~type of cell~
                            <cell_position>
                                ~position of cell~
                                -properties:
                                    <row>
                                        ~row number~
                                    <column>
                                        ~column letter~

<chunk_table>
    ~a table broken down into chunks~
    -assembly:
        <chunk_row>
            ~A row of chunks~
            <sheet_data "chunk">
                ~A piece of a larger entity, in this case, a spreadsheet~
                -properties:
                    <sheet_data "context_left">
                    <sheet_data "context_top">

<cell_tag "formula">
    ~A mathematical expression that calculates a value~

<cell_tag "label">
    ~A name or description used to identify a piece of data~

<cell_tag "subchunk">
    ~A particular subchunk tag~
    -properties:
        <subchunk_name>
            ~subchunk containing a given cell~

<subchunk_table>
    ~segregated chunk table~
    -assembly:
        <segregated_chunk_row>
            ~a row of segregated chunks~
            <chunk "segregated_chunk">
                ~a chunk reorganized into subchunks instead of rows and cells~
                <chunk "subchunk">
                    ~A piece of a chunk, used to organize and manage data~
                    -properties:
                        <cell_tag>
                            ~the type of cell within a subchunk~

<macrochunk_sheet>
    ~a set of macrochunks~
    <sheet_data "macrochunk">
        ~a chunk of all same type cells~
        -properties:
            <subchunk "macrochunk_context_left">
            <subchunk "macrochunk_context_top">
            <subchunk "macrochunk_context_right">
            <subchunk "macrochunk_context_bottom">

<table>
    ~A data structure~
    -assembly:
        <table "subtable">
            ~A table that is part of a larger table~
        <row>
            ~Rows in the table~
        <column>
            ~Columns in the table~

<python_formula>
    ~A Python version of a formula~
    -properties:
        <expression>
            ~The Python expression~

<table>
    -properties:
        <usage_description>
            ~A text description of how something is used~

<s4 "Spreadsheet_Object_Definition">
    ~Spreadsheet object definition in S4~

<s4 "Spreadsheet_Object_Instance">
    ~Spreadsheet object instance in S4~

<py "python_class">
    ~A Python class~

<py "python_class_instance">
    ~An instance of a Python class~

<i-o_structure:>
    <Task "Excellent">
        ~turns single page spreadsheets into s4 and Python using ML~
        -input:
            <csv "input_file_set">
            ~a set of one or more input spreadsheets~
        -output:
            <s4 "Spreadsheet_Object_Definition">
            <s4 "Spreadsheet_Object_Instance">
            <py "python_class">
            <py "python_class_instance">
            <import_sheet>
                ~import sheet/sheets with a file select UI~
                -input:  
                    <csv "input_file_set">
                        ~Set of one or more input spreadsheets~
                        -properties:
                            <sheets>
                                ~The sheets in the file set~
                -output:
                    <sheet>
                        ~Individual sheet in the file set~
                        -properties:
                            <name>
                                ~Name of the sheet~
                            <sheet_data>
                                ~Data contained in the sheet~
                                -assembly:
                                    <cell_row>
                                        ~Rows in the table~
                                        <cell>
                                            ~cells in the row~
                                            -properties:
                                                <cell_value>
                                                    ~value in cell~
                                                <cell_tag>
                                                    ~type of cell~
                                                <cell_position>
                                                    ~position of cell~
                                                    -properties:
                                                        <row>
                                                            ~row number~
                                                        <column>
                                                            ~column letter~
            <chunk_sheet>
                ~break down spreadsheets into smaller pieces~
                -input:
                    <sheet>
                -output:
                    <chunk_table>
                        ~a table broken down into chunks~
                        -assembly:
                            <chunk_row>
                                ~A row of chunks~
                                <sheet_data "chunk">
                                    ~A piece of a larger entity, in this case, a spreadsheet~
                                    -properties:
                                        <sheet_data "context_left">
                                        <sheet_data "context_top">
            <formula_tagging>
                ~tag formulas within a chunk~
                -input:
                    <chunk_table>
                -output:
                    <chunk_table>
                        -assembly:
                            <cell_tag "formula">
                                ~A tag for a cell containing a mathematical expression that calculates a value~
            <label_tagging>
                ~tag labels within a chunk~
                -input:
                    <chunk_table>
                -output:
                    <chunk_table>
                        -assembly:
                            <cell_tag "label">
                                ~A name or description used to identify a piece of data~
            <Subchunks>
                ~Break each chunk into largest rectangles of same basic type~
                -input:
                    <chunk_table>
                    <cell_tag "label">
                    <cell_tag "formula">
                -output:     
                    <chunk_table>
                        -assembly:
                            <cell_tag "subchunk">
                                ~A particular subchunk tag~
                                -properties:
                                    <subchunk_name>
                                        ~subchunk containing a given cell~
            <Subchunk_restructuring>
                ~turning cells within a table into cells within a table of segregated chunks ~
                -input:
                    <chunk_table>
                -output:     
                    <subchunk_table>
                        ~segregated chunk table~
                        -assembly:
                            <segregated_chunk_row>
                                ~a row of segregated chunks~
                                <chunk "segregated_chunk">
                                    ~a chunk reorganized into subchunks instead of rows and cells~
                                    <chunk "subchunk">
                                        ~A piece of a chunk, used to organize and manage data~
                                        -properties:
                                            <cell_tag>
                                                ~the type of cell within a subchunk~
            <macrochunking>
                ~combine subchunks across chunks to build macrochunks~
                -input:
                    <subchunk_table>
                -output:
                    <macrochunk_sheet>
                        ~a set of macrochunks~
                        <sheet_data "macrochunk">
                            ~a chunk of all same type cells~
                            -properties:
                                <subchunk "macrochunk_context_left">
                                <subchunk "macrochunk_context_top">
                                <subchunk "macrochunk_context_right">
                                <subchunk "macrochunk_context_bottom">

            <table_tree_generation> 
                ~compare position and size of macrochunks to create a tree hierarchy of tables~
                -input:
                    <macrochunk_sheet>
                -output:
                    <sheet_tree>
                        <table>
                            ~A data structure~
                            -assembly:
                                <table "subtable">
                                    ~A table that is part of a larger table~
                                <row>
                                    ~Rows in the table~
                                    -properties:
                                        <formula>
                                            ~an optional property containing the formula within the cells in the row~
                                <column>
                                    ~Columns in the table~
                                    -properties:
                                        <formula>
                                            ~an optional property containing the formula within the cells in the column~
            <formula_conversion>
                ~use libraries to turn excel formulas into python~
                -input:
                    <sheet_tree>
                -output:
                    <python_formula>
                        ~A Python version of a formula~
                        -properties:
                            <expression>
                                ~The Python expression of the formula~
            <usage_definining>
                ~use AI to predict usage of a spreadsheet to create a description~
                -input:
                    <sheet_tree>
                -output:
                    <row>
                        -properties:
                            <usage>
                                ~LLM defined usage of a row~
                    <column>
                        -properties:
                            <usage>
                                ~LLM defined usage of a column~
            <s4_compilation>
                ~use an LLM to produce and save an s4 file with said structure~
                -input:
                    <sheet_tree>
                -output:
                    <s4 "Spreadsheet_Object_Definition">
            <s4_instance_compilation>
                ~produce data instances for all the excel files put in~
                -input:
                    <s4 "Spreadsheet_Object_Definition">
                -output:
                    <s4 "Spreadsheet_Object_Instance">
            <python_compilation>
                ~produce and save a python class file with said structure~
                -input:
                    <s4 "Spreadsheet_Object_Definition">
                -output:
                    <py "python_class">
            <python_instance_compilation>
                ~produce and save python files for every instance of the data~
                -input:
                    <py "python_class">
                    <sheet_tree>
                -output:
                    <py "python_class_instance">


<Excellent>
    -files:
            <main>
                ~main file to run code~
            <folder "class_files">
                ~python class files~
                <chunk_table>
                <input_file_set>
                <macrochunk_sheet>
                <sheet_tree>
                <sheet>
                <subchunk_table>
            <sheet_parser>
                ~import and parse sheet/sheets~
            <sheet_chunker>
                ~break down spreadsheets into smaller pieces~
            <formula_tagger>
                ~tag formulas within a chunk~
            <label_tagger>
                ~tag labels within a chunk~
            <subchunker>
                ~Break each chunk into largest rectangles of same basic type~
            <macrochunker>
                ~combine subchunks across chunks to build tables~
            <sheet_tree_brancher> 
                ~compare position and size of tables to create a tree hierarchy of tables~
            <formula_converter>
                ~use libraries to turn excel formulas into python~
            <usage_definer>
                ~use AI to predict usage of a spreadsheet to create a description~
            <s4_compiler>
                ~produce and save an s4 file with said structure~
            <s4_instance_compiler>
                ~produce data instances for all the excel files put in~
            <python_compiler>
                ~produce and save a python class file with said structure~
            <python_instance_compiler>
                ~produce and save python files for every instance of the data~

    